cmake_minimum_required(VERSION 3.24)

# Change to your project name
set (my_project_name ONNXAudioPluginTemplate)                       # Enter the name of your project
set (current_version 0.0.1)                                # Enter the version of your project (major.minor.bugfix)
set (company_name FredRabelo)                            # Enter your company name
set (product_name ${my_project_name})                          # Enter the name of your product: The name of the final executable, which can differ from the target name
set (plugin_name ${my_project_name})                           # The name of the plugin in a DAW environment, may differ from the name of the physical plugin file (product_name) 
set (manufacturer_code Fred)                              # Enter your manufacturer code: A four-character manufacturer id with at least one upper-case character
set (plugin_code F001)                                    # Enter your plugin code: A unique four-character plugin id with exactly one upper-case character
set (formats_to_build VST3 Standalone)                    # The formats to build. valid formats are: Standalone Unity VST3 AU AUv3 AAX VST
set (path_icon_big "")                                      # Paths to image files that will be used to generate app icons. 
set (path_icon_small "")                                    # If only one of these parameters is specified, then that image will be used for all icon resolutions.

set (plugin_description Demo)                    # Enter a description of your plugin

project(${my_project_name} VERSION ${current_version})

set(CMAKE_CXX_STANDARD 17)

set(ONNX_SOURCE_DIR D:/Fred/Uni/Abschluss/Coding/Libraries)    # Set the path to the installed ONNX libraries
set(LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs)                   # Set the path to install the libraries

# We're going to use CPM as our package manager to bring in JUCE
# Check to see if we have CPM installed already.  Bring it in if we don't.
set(CPM_DOWNLOAD_VERSION 0.40.5)
set(CPM_DOWNLOAD_LOCATION "${LIB_DIR}/cmake/CPM_${CPM_DOWNLOAD_VERSION}.cmake")

if (NOT EXISTS ${CPM_DOWNLOAD_LOCATION})
    message(STATUS "Downloading CPM.cmake to ${CPM_DOWNLOAD_LOCATION}")
    file(DOWNLOAD https://github.com/cpm-cmake/CPM.cmake/releases/download/v${CPM_DOWNLOAD_VERSION}/CPM.cmake ${CPM_DOWNLOAD_LOCATION})
endif ()

include(${CPM_DOWNLOAD_LOCATION})

# Bring in JUCE locally
CPMAddPackage(
    NAME juce
    GIT_REPOSITORY https://github.com/juce-framework/JUCE.git
    GIT_TAG origin/master
    SOURCE_DIR ${LIB_DIR}/juce
)

# Make sure you include any new source files here
set(SourceFiles
        Source/PluginEditor.cpp
        Source/PluginEditor.h
        Source/PluginProcessor.cpp
        Source/PluginProcessor.h
        Source/silero_vad.ort.h
)

# Change these to your own preferences
juce_add_plugin(${PROJECT_NAME}
    VERSION ${current_version}                          # Set this if the plugin version is different to the project version
    COMPANY_NAME ${company_name}                        # Specify the name of the plugin's author
    PRODUCT_NAME ${product_name}                        # The name of the final executable, which can differ from the target name
    PLUGIN_NAME ${plugin_name} 						    # this is the name that will be displayed in the DAW when the user go to load a plugin
    PLUGIN_MANUFACTURER_CODE ${manufacturer_code}       # A four-character unique id for your company. AU: at least one upper-case letter. Garageband: first letter upper-case, remaining letters lower-case.
    PLUGIN_CODE ${plugin_code}                          # A unique four-character plugin id with exactly one upper-case character
    DESCRIPTION ${plugin_description}
    FORMATS ${formats_to_build}                       # The formats to build. Other valid formats are: Standalone Unity VST3 AU AUv3 AAX VST
    # ICON_BIG ${path_icon_big}                         # Paths to image files that will be used to generate app icons. 
    # ICON_SMALL ${path_icon_small}                     # If only one of these parameters is specified, then that image will be used for all icon resolutions.
 
    IS_SYNTH False                              # Is this a synth or an effect?
    IS_MIDI_EFFECT FALSE                        # Is this plugin a MIDI effect?
    NEEDS_MIDI_INPUT False                      # Does the plugin need midi input?
    NEEDS_MIDI_OUTPUT FALSE                     # Does the plugin need midi output?
    
    DISABLE_AAX_MULTI_MONO TRUE                 # Whether the AAX multi mono bus layout should be disabled.
    EDITOR_WANTS_KEYBOARD_FOCUS FALSE           # Does the editor need keyboard focus?

    VST3_CATEGORIES Tools
    # AU_MAIN_TYPE
    AAX_CATEGORY None

    COPY_PLUGIN_AFTER_BUILD FALSE               # Should the plugin be installed to a default location after building?
    # VST3_COPY_DIR                               # Location the plugins will be copied after building if COPY_PLUGIN_AFTER_BUILD is set.
    # AAX_COPY_DIR                                # If you want to install all of the plugins in a subdirectory to a non-default location, 
    # AU_COPY_DIR                                 # you can set the JUCE_"plugintype"_COPY_DIR property on the set_directory_properties, rather than setting this argument on each individual target.
)

# include onnx directories
target_include_directories(${PROJECT_NAME}
    # using directories from the Release Build
    PRIVATE
        ${ONNX_SOURCE_DIR}/onnxruntime/onnxruntime;
        # ${ONNX_SOURCE_DIR}/onnxruntime/onnxruntime/test/win_getopt/wide/include;  # do we need this?
        ${ONNX_SOURCE_DIR}/onnxruntime/onnxruntime/test/util/include;
        ${ONNX_SOURCE_DIR}/onnxruntime/include/onnxruntime;
        ${ONNX_SOURCE_DIR}/onnxruntime/include/onnxruntime/core/session;
        ${ONNX_SOURCE_DIR}/onnxruntime/build/Windows/Release/_deps/pytorch_cpuinfo-src/include;
        ${ONNX_SOURCE_DIR}/onnxruntime/build/Windows/Release;
        ${ONNX_SOURCE_DIR}/onnxruntime/build/Windows/Release/_deps/utf8_range-src;
        ${ONNX_SOURCE_DIR}/onnxruntime/build/Windows/Release/_deps/abseil_cpp-src;
)


# How we want our SourceFiles to appear in our IDE
# source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SourceFiles})
source_group("Shared Code" FILES ${SourceFiles})

# Make the SourceFiles buildable
target_sources(${PROJECT_NAME} PRIVATE ${SourceFiles})

# These are some toggleable options from the JUCE CMake API
target_compile_definitions(${PROJECT_NAME}
    PUBLIC
    # Standard
        JUCE_WEB_BROWSER=0
        JUCE_USE_CURL=0
        JUCE_VST3_CAN_REPLACE_VST2=0
    # extra
        #JUCE_ALSA=1
        #JUCE_DIRECTSOUND=1
        #JUCE_DISABLE_CAUTIOUS_PARAMETER_ID_CHECKING=1
        #JUCE_PLUGINHOST_LADSPA=1
        #JUCE_PLUGINHOST_LV2=1
        #JUCE_PLUGINHOST_VST3=1
        #JUCE_USE_OGGVORBIS=1
        #JUCE_VST3_HOST_CROSS_PLATFORM_UID=1
)


set(ONNX_LIBS_PATH_PREFIX D:/Fred/Uni/Abschluss/Coding/Libraries/onnxruntime/build/Windows/Release)

set(ONNX_LIBS_RELEASE
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_test_utils.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_session.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_optimizer.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_providers.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_util.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_lora.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_framework.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_util.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_graph.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_mlas.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_common.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnxruntime_flatbuffers.lib;
    ${ONNX_LIBS_PATH_PREFIX}/Release/onnx_test_data_proto.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/onnx-build/Release/onnx.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/onnx-build/Release/onnx_proto.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/protobuf-build/Release/libprotobuf-lite.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/re2-build/Release/re2.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/flatbuffers-build/Release/flatbuffers.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_internal_message.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_internal_format.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/synchronization/Release/absl_synchronization.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_internal_globals.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/synchronization/Release/absl_kernel_timeout_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/strings/Release/absl_str_format_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/hash/Release/absl_hash.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/flags/Release/absl_flags_commandlineflag.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/time/Release/absl_time.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_symbolize.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/synchronization/Release/absl_graphcycles_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_internal_conditions.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/strings/Release/absl_strings.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/base/Release/absl_malloc_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_demangle_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_stacktrace.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/base/Release/absl_base.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_demangle_rust.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/types/Release/absl_bad_optional_access.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/strings/Release/absl_strings_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_debugging_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/numeric/Release/absl_int128.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/base/Release/absl_spinlock_wait.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_decode_rust_punycode.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/base/Release/absl_raw_logging_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/base/Release/absl_log_severity.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/flags/Release/absl_flags_commandlineflag_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_utf8_for_code_point.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/hash/Release/absl_city.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/hash/Release/absl_low_level_hash.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_sink.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_internal_log_sink_set.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_entry.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_globals.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_internal_nullguard.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/debugging/Release/absl_examine_stack.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_log_internal_proto.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/base/Release/absl_strerror.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/container/Release/absl_raw_hash_set.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/log/Release/absl_vlog_config_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/flags/Release/absl_flags_reflection.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/flags/Release/absl_flags_internal.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/flags/Release/absl_flags_config.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/time/Release/absl_time_zone.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/time/Release/absl_civil_time.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/strings/Release/absl_string_view.lib;
    ${ONNX_LIBS_PATH_PREFIX}/_deps/abseil_cpp-build/absl/base/Release/absl_throw_delegate.lib;
)

# libraries to bring into our project
target_link_libraries(${PROJECT_NAME}
    PRIVATE
    # add ONNX libs
        ${ONNX_LIBS_RELEASE}

    # JUCE Modules
        juce::juce_analytics
        juce::juce_animation
        juce::juce_audio_basics
        juce::juce_audio_devices
        juce::juce_audio_formats
        juce::juce_audio_plugin_client
        juce::juce_audio_processors
        juce::juce_audio_utils
        juce::juce_box2d
        juce::juce_core
        juce::juce_cryptography
        juce::juce_data_structures
        juce::juce_dsp
        juce::juce_events
        juce::juce_graphics
        juce::juce_gui_basics
        juce::juce_gui_extra
        juce::juce_javascript
        juce::juce_midi_ci
        juce::juce_opengl
        juce::juce_osc
        juce::juce_product_unlocking
        juce::juce_video
    
    PUBLIC
    
    #JUCE Stuff
        juce::juce_recommended_config_flags
        juce::juce_recommended_lto_flags
        juce::juce_recommended_warning_flags
)
